// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Track is an object representing the database table.
type Track struct {
	TrackId      int64       `boil:"TrackId" json:"TrackId" toml:"TrackId" yaml:"TrackId"`
	Name         string      `boil:"Name" json:"Name" toml:"Name" yaml:"Name"`
	AlbumId      null.Int64  `boil:"AlbumId" json:"AlbumId,omitempty" toml:"AlbumId" yaml:"AlbumId,omitempty"`
	MediaTypeId  int64       `boil:"MediaTypeId" json:"MediaTypeId" toml:"MediaTypeId" yaml:"MediaTypeId"`
	GenreId      null.Int64  `boil:"GenreId" json:"GenreId,omitempty" toml:"GenreId" yaml:"GenreId,omitempty"`
	Composer     null.String `boil:"Composer" json:"Composer,omitempty" toml:"Composer" yaml:"Composer,omitempty"`
	Milliseconds int64       `boil:"Milliseconds" json:"Milliseconds" toml:"Milliseconds" yaml:"Milliseconds"`
	Bytes        null.Int64  `boil:"Bytes" json:"Bytes,omitempty" toml:"Bytes" yaml:"Bytes,omitempty"`
	UnitPrice    string      `boil:"UnitPrice" json:"UnitPrice" toml:"UnitPrice" yaml:"UnitPrice"`

	R *trackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackColumns = struct {
	TrackId      string
	Name         string
	AlbumId      string
	MediaTypeId  string
	GenreId      string
	Composer     string
	Milliseconds string
	Bytes        string
	UnitPrice    string
}{
	TrackId:      "TrackId",
	Name:         "Name",
	AlbumId:      "AlbumId",
	MediaTypeId:  "MediaTypeId",
	GenreId:      "GenreId",
	Composer:     "Composer",
	Milliseconds: "Milliseconds",
	Bytes:        "Bytes",
	UnitPrice:    "UnitPrice",
}

var TrackTableColumns = struct {
	TrackId      string
	Name         string
	AlbumId      string
	MediaTypeId  string
	GenreId      string
	Composer     string
	Milliseconds string
	Bytes        string
	UnitPrice    string
}{
	TrackId:      "Track.TrackId",
	Name:         "Track.Name",
	AlbumId:      "Track.AlbumId",
	MediaTypeId:  "Track.MediaTypeId",
	GenreId:      "Track.GenreId",
	Composer:     "Track.Composer",
	Milliseconds: "Track.Milliseconds",
	Bytes:        "Track.Bytes",
	UnitPrice:    "Track.UnitPrice",
}

// Generated where

var TrackWhere = struct {
	TrackId      whereHelperint64
	Name         whereHelperstring
	AlbumId      whereHelpernull_Int64
	MediaTypeId  whereHelperint64
	GenreId      whereHelpernull_Int64
	Composer     whereHelpernull_String
	Milliseconds whereHelperint64
	Bytes        whereHelpernull_Int64
	UnitPrice    whereHelperstring
}{
	TrackId:      whereHelperint64{field: "\"Track\".\"TrackId\""},
	Name:         whereHelperstring{field: "\"Track\".\"Name\""},
	AlbumId:      whereHelpernull_Int64{field: "\"Track\".\"AlbumId\""},
	MediaTypeId:  whereHelperint64{field: "\"Track\".\"MediaTypeId\""},
	GenreId:      whereHelpernull_Int64{field: "\"Track\".\"GenreId\""},
	Composer:     whereHelpernull_String{field: "\"Track\".\"Composer\""},
	Milliseconds: whereHelperint64{field: "\"Track\".\"Milliseconds\""},
	Bytes:        whereHelpernull_Int64{field: "\"Track\".\"Bytes\""},
	UnitPrice:    whereHelperstring{field: "\"Track\".\"UnitPrice\""},
}

// TrackRels is where relationship names are stored.
var TrackRels = struct {
	MediaTypeIdMediaType string
	GenreIdGenre         string
	AlbumIdAlbum         string
	TrackIdInvoiceLines  string
	PlaylistIdPlaylists  string
}{
	MediaTypeIdMediaType: "MediaTypeIdMediaType",
	GenreIdGenre:         "GenreIdGenre",
	AlbumIdAlbum:         "AlbumIdAlbum",
	TrackIdInvoiceLines:  "TrackIdInvoiceLines",
	PlaylistIdPlaylists:  "PlaylistIdPlaylists",
}

// trackR is where relationships are stored.
type trackR struct {
	MediaTypeIdMediaType *MediaType       `boil:"MediaTypeIdMediaType" json:"MediaTypeIdMediaType" toml:"MediaTypeIdMediaType" yaml:"MediaTypeIdMediaType"`
	GenreIdGenre         *Genre           `boil:"GenreIdGenre" json:"GenreIdGenre" toml:"GenreIdGenre" yaml:"GenreIdGenre"`
	AlbumIdAlbum         *Album           `boil:"AlbumIdAlbum" json:"AlbumIdAlbum" toml:"AlbumIdAlbum" yaml:"AlbumIdAlbum"`
	TrackIdInvoiceLines  InvoiceLineSlice `boil:"TrackIdInvoiceLines" json:"TrackIdInvoiceLines" toml:"TrackIdInvoiceLines" yaml:"TrackIdInvoiceLines"`
	PlaylistIdPlaylists  PlaylistSlice    `boil:"PlaylistIdPlaylists" json:"PlaylistIdPlaylists" toml:"PlaylistIdPlaylists" yaml:"PlaylistIdPlaylists"`
}

// NewStruct creates a new relationship struct
func (*trackR) NewStruct() *trackR {
	return &trackR{}
}

// trackL is where Load methods for each relationship are stored.
type trackL struct{}

var (
	trackAllColumns            = []string{"TrackId", "Name", "AlbumId", "MediaTypeId", "GenreId", "Composer", "Milliseconds", "Bytes", "UnitPrice"}
	trackColumnsWithoutDefault = []string{"Name", "AlbumId", "MediaTypeId", "GenreId", "Composer", "Milliseconds", "Bytes", "UnitPrice"}
	trackColumnsWithDefault    = []string{"TrackId"}
	trackPrimaryKeyColumns     = []string{"TrackId"}
)

type (
	// TrackSlice is an alias for a slice of pointers to Track.
	// This should almost always be used instead of []Track.
	TrackSlice []*Track
	// TrackHook is the signature for custom Track hook methods
	TrackHook func(context.Context, boil.ContextExecutor, *Track) error

	trackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackType                 = reflect.TypeOf(&Track{})
	trackMapping              = queries.MakeStructMapping(trackType)
	trackPrimaryKeyMapping, _ = queries.BindMapping(trackType, trackMapping, trackPrimaryKeyColumns)
	trackInsertCacheMut       sync.RWMutex
	trackInsertCache          = make(map[string]insertCache)
	trackUpdateCacheMut       sync.RWMutex
	trackUpdateCache          = make(map[string]updateCache)
	trackUpsertCacheMut       sync.RWMutex
	trackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackBeforeInsertHooks []TrackHook
var trackBeforeUpdateHooks []TrackHook
var trackBeforeDeleteHooks []TrackHook
var trackBeforeUpsertHooks []TrackHook

var trackAfterInsertHooks []TrackHook
var trackAfterSelectHooks []TrackHook
var trackAfterUpdateHooks []TrackHook
var trackAfterDeleteHooks []TrackHook
var trackAfterUpsertHooks []TrackHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Track) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Track) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Track) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Track) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Track) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Track) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Track) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Track) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Track) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackHook registers your hook function for all future operations.
func AddTrackHook(hookPoint boil.HookPoint, trackHook TrackHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trackBeforeInsertHooks = append(trackBeforeInsertHooks, trackHook)
	case boil.BeforeUpdateHook:
		trackBeforeUpdateHooks = append(trackBeforeUpdateHooks, trackHook)
	case boil.BeforeDeleteHook:
		trackBeforeDeleteHooks = append(trackBeforeDeleteHooks, trackHook)
	case boil.BeforeUpsertHook:
		trackBeforeUpsertHooks = append(trackBeforeUpsertHooks, trackHook)
	case boil.AfterInsertHook:
		trackAfterInsertHooks = append(trackAfterInsertHooks, trackHook)
	case boil.AfterSelectHook:
		trackAfterSelectHooks = append(trackAfterSelectHooks, trackHook)
	case boil.AfterUpdateHook:
		trackAfterUpdateHooks = append(trackAfterUpdateHooks, trackHook)
	case boil.AfterDeleteHook:
		trackAfterDeleteHooks = append(trackAfterDeleteHooks, trackHook)
	case boil.AfterUpsertHook:
		trackAfterUpsertHooks = append(trackAfterUpsertHooks, trackHook)
	}
}

// One returns a single track record from the query.
func (q trackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Track, error) {
	o := &Track{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Track")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Track records from the query.
func (q trackQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackSlice, error) {
	var o []*Track

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Track slice")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Track records in the query.
func (q trackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Track rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Track exists")
	}

	return count > 0, nil
}

// MediaTypeIdMediaType pointed to by the foreign key.
func (o *Track) MediaTypeIdMediaType(mods ...qm.QueryMod) mediaTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"MediaTypeId\" = ?", o.MediaTypeId),
	}

	queryMods = append(queryMods, mods...)

	query := MediaTypes(queryMods...)
	queries.SetFrom(query.Query, "\"MediaType\"")

	return query
}

// GenreIdGenre pointed to by the foreign key.
func (o *Track) GenreIdGenre(mods ...qm.QueryMod) genreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"GenreId\" = ?", o.GenreId),
	}

	queryMods = append(queryMods, mods...)

	query := Genres(queryMods...)
	queries.SetFrom(query.Query, "\"Genre\"")

	return query
}

// AlbumIdAlbum pointed to by the foreign key.
func (o *Track) AlbumIdAlbum(mods ...qm.QueryMod) albumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"AlbumId\" = ?", o.AlbumId),
	}

	queryMods = append(queryMods, mods...)

	query := Albums(queryMods...)
	queries.SetFrom(query.Query, "\"Album\"")

	return query
}

// TrackIdInvoiceLines retrieves all the InvoiceLine's InvoiceLines with an executor via TrackId column.
func (o *Track) TrackIdInvoiceLines(mods ...qm.QueryMod) invoiceLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"InvoiceLine\".\"TrackId\"=?", o.TrackId),
	)

	query := InvoiceLines(queryMods...)
	queries.SetFrom(query.Query, "\"InvoiceLine\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"InvoiceLine\".*"})
	}

	return query
}

// PlaylistIdPlaylists retrieves all the Playlist's Playlists with an executor via PlaylistId column.
func (o *Track) PlaylistIdPlaylists(mods ...qm.QueryMod) playlistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"PlaylistTrack\" on \"Playlist\".\"PlaylistId\" = \"PlaylistTrack\".\"PlaylistId\""),
		qm.Where("\"PlaylistTrack\".\"TrackId\"=?", o.TrackId),
	)

	query := Playlists(queryMods...)
	queries.SetFrom(query.Query, "\"Playlist\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Playlist\".*"})
	}

	return query
}

// LoadMediaTypeIdMediaType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackL) LoadMediaTypeIdMediaType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.MediaTypeId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.MediaTypeId {
					continue Outer
				}
			}

			args = append(args, obj.MediaTypeId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`MediaType`),
		qm.WhereIn(`MediaType.MediaTypeId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MediaType")
	}

	var resultSlice []*MediaType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MediaType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for MediaType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for MediaType")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MediaTypeIdMediaType = foreign
		if foreign.R == nil {
			foreign.R = &mediaTypeR{}
		}
		foreign.R.MediaTypeIdTracks = append(foreign.R.MediaTypeIdTracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MediaTypeId == foreign.MediaTypeId {
				local.R.MediaTypeIdMediaType = foreign
				if foreign.R == nil {
					foreign.R = &mediaTypeR{}
				}
				foreign.R.MediaTypeIdTracks = append(foreign.R.MediaTypeIdTracks, local)
				break
			}
		}
	}

	return nil
}

// LoadGenreIdGenre allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackL) LoadGenreIdGenre(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		if !queries.IsNil(object.GenreId) {
			args = append(args, object.GenreId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GenreId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GenreId) {
				args = append(args, obj.GenreId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Genre`),
		qm.WhereIn(`Genre.GenreId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Genre")
	}

	var resultSlice []*Genre
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Genre")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Genre")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Genre")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GenreIdGenre = foreign
		if foreign.R == nil {
			foreign.R = &genreR{}
		}
		foreign.R.GenreIdTracks = append(foreign.R.GenreIdTracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GenreId, foreign.GenreId) {
				local.R.GenreIdGenre = foreign
				if foreign.R == nil {
					foreign.R = &genreR{}
				}
				foreign.R.GenreIdTracks = append(foreign.R.GenreIdTracks, local)
				break
			}
		}
	}

	return nil
}

// LoadAlbumIdAlbum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackL) LoadAlbumIdAlbum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		if !queries.IsNil(object.AlbumId) {
			args = append(args, object.AlbumId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AlbumId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AlbumId) {
				args = append(args, obj.AlbumId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Album`),
		qm.WhereIn(`Album.AlbumId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Album")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Album")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AlbumIdAlbum = foreign
		if foreign.R == nil {
			foreign.R = &albumR{}
		}
		foreign.R.AlbumIdTracks = append(foreign.R.AlbumIdTracks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AlbumId, foreign.AlbumId) {
				local.R.AlbumIdAlbum = foreign
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.AlbumIdTracks = append(foreign.R.AlbumIdTracks, local)
				break
			}
		}
	}

	return nil
}

// LoadTrackIdInvoiceLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadTrackIdInvoiceLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.TrackId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.TrackId {
					continue Outer
				}
			}

			args = append(args, obj.TrackId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`InvoiceLine`),
		qm.WhereIn(`InvoiceLine.TrackId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InvoiceLine")
	}

	var resultSlice []*InvoiceLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InvoiceLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on InvoiceLine")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for InvoiceLine")
	}

	if len(invoiceLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrackIdInvoiceLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceLineR{}
			}
			foreign.R.TrackIdTrack = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TrackId == foreign.TrackId {
				local.R.TrackIdInvoiceLines = append(local.R.TrackIdInvoiceLines, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceLineR{}
				}
				foreign.R.TrackIdTrack = local
				break
			}
		}
	}

	return nil
}

// LoadPlaylistIdPlaylists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackL) LoadPlaylistIdPlaylists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrack interface{}, mods queries.Applicator) error {
	var slice []*Track
	var object *Track

	if singular {
		object = maybeTrack.(*Track)
	} else {
		slice = *maybeTrack.(*[]*Track)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackR{}
		}
		args = append(args, object.TrackId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackR{}
			}

			for _, a := range args {
				if a == obj.TrackId {
					continue Outer
				}
			}

			args = append(args, obj.TrackId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"Playlist\".PlaylistId, \"Playlist\".Name, \"a\".\"TrackId\""),
		qm.From("\"Playlist\""),
		qm.InnerJoin("\"PlaylistTrack\" as \"a\" on \"Playlist\".\"PlaylistId\" = \"a\".\"PlaylistId\""),
		qm.WhereIn("\"a\".\"TrackId\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Playlist")
	}

	var resultSlice []*Playlist

	var localJoinCols []int64
	for results.Next() {
		one := new(Playlist)
		var localJoinCol int64

		err = results.Scan(&one.PlaylistId, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for Playlist")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice Playlist")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Playlist")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Playlist")
	}

	if len(playlistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlaylistIdPlaylists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playlistR{}
			}
			foreign.R.TrackIdTracks = append(foreign.R.TrackIdTracks, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.TrackId == localJoinCol {
				local.R.PlaylistIdPlaylists = append(local.R.PlaylistIdPlaylists, foreign)
				if foreign.R == nil {
					foreign.R = &playlistR{}
				}
				foreign.R.TrackIdTracks = append(foreign.R.TrackIdTracks, local)
				break
			}
		}
	}

	return nil
}

// SetMediaTypeIdMediaType of the track to the related item.
// Sets o.R.MediaTypeIdMediaType to related.
// Adds o to related.R.MediaTypeIdTracks.
func (o *Track) SetMediaTypeIdMediaType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MediaType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Track\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"MediaTypeId"}),
		strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
	)
	values := []interface{}{related.MediaTypeId, o.TrackId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MediaTypeId = related.MediaTypeId
	if o.R == nil {
		o.R = &trackR{
			MediaTypeIdMediaType: related,
		}
	} else {
		o.R.MediaTypeIdMediaType = related
	}

	if related.R == nil {
		related.R = &mediaTypeR{
			MediaTypeIdTracks: TrackSlice{o},
		}
	} else {
		related.R.MediaTypeIdTracks = append(related.R.MediaTypeIdTracks, o)
	}

	return nil
}

// SetGenreIdGenre of the track to the related item.
// Sets o.R.GenreIdGenre to related.
// Adds o to related.R.GenreIdTracks.
func (o *Track) SetGenreIdGenre(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Genre) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Track\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"GenreId"}),
		strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
	)
	values := []interface{}{related.GenreId, o.TrackId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GenreId, related.GenreId)
	if o.R == nil {
		o.R = &trackR{
			GenreIdGenre: related,
		}
	} else {
		o.R.GenreIdGenre = related
	}

	if related.R == nil {
		related.R = &genreR{
			GenreIdTracks: TrackSlice{o},
		}
	} else {
		related.R.GenreIdTracks = append(related.R.GenreIdTracks, o)
	}

	return nil
}

// RemoveGenreIdGenre relationship.
// Sets o.R.GenreIdGenre to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Track) RemoveGenreIdGenre(ctx context.Context, exec boil.ContextExecutor, related *Genre) error {
	var err error

	queries.SetScanner(&o.GenreId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("GenreId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GenreIdGenre = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GenreIdTracks {
		if queries.Equal(o.GenreId, ri.GenreId) {
			continue
		}

		ln := len(related.R.GenreIdTracks)
		if ln > 1 && i < ln-1 {
			related.R.GenreIdTracks[i] = related.R.GenreIdTracks[ln-1]
		}
		related.R.GenreIdTracks = related.R.GenreIdTracks[:ln-1]
		break
	}
	return nil
}

// SetAlbumIdAlbum of the track to the related item.
// Sets o.R.AlbumIdAlbum to related.
// Adds o to related.R.AlbumIdTracks.
func (o *Track) SetAlbumIdAlbum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Album) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Track\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"AlbumId"}),
		strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
	)
	values := []interface{}{related.AlbumId, o.TrackId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AlbumId, related.AlbumId)
	if o.R == nil {
		o.R = &trackR{
			AlbumIdAlbum: related,
		}
	} else {
		o.R.AlbumIdAlbum = related
	}

	if related.R == nil {
		related.R = &albumR{
			AlbumIdTracks: TrackSlice{o},
		}
	} else {
		related.R.AlbumIdTracks = append(related.R.AlbumIdTracks, o)
	}

	return nil
}

// RemoveAlbumIdAlbum relationship.
// Sets o.R.AlbumIdAlbum to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Track) RemoveAlbumIdAlbum(ctx context.Context, exec boil.ContextExecutor, related *Album) error {
	var err error

	queries.SetScanner(&o.AlbumId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("AlbumId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AlbumIdAlbum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AlbumIdTracks {
		if queries.Equal(o.AlbumId, ri.AlbumId) {
			continue
		}

		ln := len(related.R.AlbumIdTracks)
		if ln > 1 && i < ln-1 {
			related.R.AlbumIdTracks[i] = related.R.AlbumIdTracks[ln-1]
		}
		related.R.AlbumIdTracks = related.R.AlbumIdTracks[:ln-1]
		break
	}
	return nil
}

// AddTrackIdInvoiceLines adds the given related objects to the existing relationships
// of the Track, optionally inserting them as new records.
// Appends related to o.R.TrackIdInvoiceLines.
// Sets related.R.TrackIdTrack appropriately.
func (o *Track) AddTrackIdInvoiceLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceLine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackId = o.TrackId
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"InvoiceLine\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"TrackId"}),
				strmangle.WhereClause("\"", "\"", 0, invoiceLinePrimaryKeyColumns),
			)
			values := []interface{}{o.TrackId, rel.InvoiceLineId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackId = o.TrackId
		}
	}

	if o.R == nil {
		o.R = &trackR{
			TrackIdInvoiceLines: related,
		}
	} else {
		o.R.TrackIdInvoiceLines = append(o.R.TrackIdInvoiceLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceLineR{
				TrackIdTrack: o,
			}
		} else {
			rel.R.TrackIdTrack = o
		}
	}
	return nil
}

// AddPlaylistIdPlaylists adds the given related objects to the existing relationships
// of the Track, optionally inserting them as new records.
// Appends related to o.R.PlaylistIdPlaylists.
// Sets related.R.TrackIdTracks appropriately.
func (o *Track) AddPlaylistIdPlaylists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Playlist) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"PlaylistTrack\" (\"TrackId\", \"PlaylistId\") values (?, ?)"
		values := []interface{}{o.TrackId, rel.PlaylistId}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &trackR{
			PlaylistIdPlaylists: related,
		}
	} else {
		o.R.PlaylistIdPlaylists = append(o.R.PlaylistIdPlaylists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playlistR{
				TrackIdTracks: TrackSlice{o},
			}
		} else {
			rel.R.TrackIdTracks = append(rel.R.TrackIdTracks, o)
		}
	}
	return nil
}

// SetPlaylistIdPlaylists removes all previously related items of the
// Track replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TrackIdTracks's PlaylistIdPlaylists accordingly.
// Replaces o.R.PlaylistIdPlaylists with related.
// Sets related.R.TrackIdTracks's PlaylistIdPlaylists accordingly.
func (o *Track) SetPlaylistIdPlaylists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Playlist) error {
	query := "delete from \"PlaylistTrack\" where \"TrackId\" = ?"
	values := []interface{}{o.TrackId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePlaylistIdPlaylistsFromTrackIdTracksSlice(o, related)
	if o.R != nil {
		o.R.PlaylistIdPlaylists = nil
	}
	return o.AddPlaylistIdPlaylists(ctx, exec, insert, related...)
}

// RemovePlaylistIdPlaylists relationships from objects passed in.
// Removes related items from R.PlaylistIdPlaylists (uses pointer comparison, removal does not keep order)
// Sets related.R.TrackIdTracks.
func (o *Track) RemovePlaylistIdPlaylists(ctx context.Context, exec boil.ContextExecutor, related ...*Playlist) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"PlaylistTrack\" where \"TrackId\" = ? and \"PlaylistId\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.TrackId}
	for _, rel := range related {
		values = append(values, rel.PlaylistId)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePlaylistIdPlaylistsFromTrackIdTracksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlaylistIdPlaylists {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlaylistIdPlaylists)
			if ln > 1 && i < ln-1 {
				o.R.PlaylistIdPlaylists[i] = o.R.PlaylistIdPlaylists[ln-1]
			}
			o.R.PlaylistIdPlaylists = o.R.PlaylistIdPlaylists[:ln-1]
			break
		}
	}

	return nil
}

func removePlaylistIdPlaylistsFromTrackIdTracksSlice(o *Track, related []*Playlist) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.TrackIdTracks {
			if o.TrackId != ri.TrackId {
				continue
			}

			ln := len(rel.R.TrackIdTracks)
			if ln > 1 && i < ln-1 {
				rel.R.TrackIdTracks[i] = rel.R.TrackIdTracks[ln-1]
			}
			rel.R.TrackIdTracks = rel.R.TrackIdTracks[:ln-1]
			break
		}
	}
}

// Tracks retrieves all the records using an executor.
func Tracks(mods ...qm.QueryMod) trackQuery {
	mods = append(mods, qm.From("\"Track\""))
	return trackQuery{NewQuery(mods...)}
}

// FindTrack retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrack(ctx context.Context, exec boil.ContextExecutor, trackId int64, selectCols ...string) (*Track, error) {
	trackObj := &Track{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Track\" where \"TrackId\"=?", sel,
	)

	q := queries.Raw(query, trackId)

	err := q.Bind(ctx, exec, trackObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Track")
	}

	if err = trackObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackObj, err
	}

	return trackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Track) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Track provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackInsertCacheMut.RLock()
	cache, cached := trackInsertCache[key]
	trackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackType, trackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Track\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Track\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Track")
	}

	if !cached {
		trackInsertCacheMut.Lock()
		trackInsertCache[key] = cache
		trackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Track.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Track) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackUpdateCacheMut.RLock()
	cache, cached := trackUpdateCache[key]
	trackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Track, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Track\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, append(wl, trackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Track row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Track")
	}

	if !cached {
		trackUpdateCacheMut.Lock()
		trackUpdateCache[key] = cache
		trackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Track")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Track")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Track\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all track")
	}
	return rowsAff, nil
}

// Delete deletes a single Track record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Track) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Track provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackPrimaryKeyMapping)
	sql := "DELETE FROM \"Track\" WHERE \"TrackId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Track")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Track")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Track")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Track")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Track\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from track slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Track")
	}

	if len(trackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Track) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrack(ctx, exec, o.TrackId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Track\".* FROM \"Track\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, trackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackSlice")
	}

	*o = slice

	return nil
}

// TrackExists checks if the Track row exists.
func TrackExists(ctx context.Context, exec boil.ContextExecutor, trackId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Track\" where \"TrackId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, trackId)
	}
	row := exec.QueryRowContext(ctx, sql, trackId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Track exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Track) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Track provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackUpsertCacheMut.RLock()
	cache, cached := trackUpsertCache[key]
	trackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackAllColumns,
			trackColumnsWithDefault,
			trackColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackAllColumns,
			trackPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Track, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackPrimaryKeyColumns))
			copy(conflict, trackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Track\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackType, trackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackType, trackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Track")
	}

	if !cached {
		trackUpsertCacheMut.Lock()
		trackUpsertCache[key] = cache
		trackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
