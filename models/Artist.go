// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Artist is an object representing the database table.
type Artist struct {
	ArtistId int64       `boil:"ArtistId" json:"ArtistId" toml:"ArtistId" yaml:"ArtistId"`
	Name     null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`

	R *artistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L artistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArtistColumns = struct {
	ArtistId string
	Name     string
}{
	ArtistId: "ArtistId",
	Name:     "Name",
}

var ArtistTableColumns = struct {
	ArtistId string
	Name     string
}{
	ArtistId: "Artist.ArtistId",
	Name:     "Artist.Name",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ArtistWhere = struct {
	ArtistId whereHelperint64
	Name     whereHelpernull_String
}{
	ArtistId: whereHelperint64{field: "\"Artist\".\"ArtistId\""},
	Name:     whereHelpernull_String{field: "\"Artist\".\"Name\""},
}

// ArtistRels is where relationship names are stored.
var ArtistRels = struct {
	ArtistIdAlbums string
}{
	ArtistIdAlbums: "ArtistIdAlbums",
}

// artistR is where relationships are stored.
type artistR struct {
	ArtistIdAlbums AlbumSlice `boil:"ArtistIdAlbums" json:"ArtistIdAlbums" toml:"ArtistIdAlbums" yaml:"ArtistIdAlbums"`
}

// NewStruct creates a new relationship struct
func (*artistR) NewStruct() *artistR {
	return &artistR{}
}

// artistL is where Load methods for each relationship are stored.
type artistL struct{}

var (
	artistAllColumns            = []string{"ArtistId", "Name"}
	artistColumnsWithoutDefault = []string{"Name"}
	artistColumnsWithDefault    = []string{"ArtistId"}
	artistPrimaryKeyColumns     = []string{"ArtistId"}
)

type (
	// ArtistSlice is an alias for a slice of pointers to Artist.
	// This should almost always be used instead of []Artist.
	ArtistSlice []*Artist
	// ArtistHook is the signature for custom Artist hook methods
	ArtistHook func(context.Context, boil.ContextExecutor, *Artist) error

	artistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	artistType                 = reflect.TypeOf(&Artist{})
	artistMapping              = queries.MakeStructMapping(artistType)
	artistPrimaryKeyMapping, _ = queries.BindMapping(artistType, artistMapping, artistPrimaryKeyColumns)
	artistInsertCacheMut       sync.RWMutex
	artistInsertCache          = make(map[string]insertCache)
	artistUpdateCacheMut       sync.RWMutex
	artistUpdateCache          = make(map[string]updateCache)
	artistUpsertCacheMut       sync.RWMutex
	artistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var artistBeforeInsertHooks []ArtistHook
var artistBeforeUpdateHooks []ArtistHook
var artistBeforeDeleteHooks []ArtistHook
var artistBeforeUpsertHooks []ArtistHook

var artistAfterInsertHooks []ArtistHook
var artistAfterSelectHooks []ArtistHook
var artistAfterUpdateHooks []ArtistHook
var artistAfterDeleteHooks []ArtistHook
var artistAfterUpsertHooks []ArtistHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Artist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Artist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Artist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Artist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Artist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Artist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Artist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Artist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Artist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range artistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArtistHook registers your hook function for all future operations.
func AddArtistHook(hookPoint boil.HookPoint, artistHook ArtistHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		artistBeforeInsertHooks = append(artistBeforeInsertHooks, artistHook)
	case boil.BeforeUpdateHook:
		artistBeforeUpdateHooks = append(artistBeforeUpdateHooks, artistHook)
	case boil.BeforeDeleteHook:
		artistBeforeDeleteHooks = append(artistBeforeDeleteHooks, artistHook)
	case boil.BeforeUpsertHook:
		artistBeforeUpsertHooks = append(artistBeforeUpsertHooks, artistHook)
	case boil.AfterInsertHook:
		artistAfterInsertHooks = append(artistAfterInsertHooks, artistHook)
	case boil.AfterSelectHook:
		artistAfterSelectHooks = append(artistAfterSelectHooks, artistHook)
	case boil.AfterUpdateHook:
		artistAfterUpdateHooks = append(artistAfterUpdateHooks, artistHook)
	case boil.AfterDeleteHook:
		artistAfterDeleteHooks = append(artistAfterDeleteHooks, artistHook)
	case boil.AfterUpsertHook:
		artistAfterUpsertHooks = append(artistAfterUpsertHooks, artistHook)
	}
}

// One returns a single artist record from the query.
func (q artistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Artist, error) {
	o := &Artist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Artist")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Artist records from the query.
func (q artistQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArtistSlice, error) {
	var o []*Artist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Artist slice")
	}

	if len(artistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Artist records in the query.
func (q artistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Artist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q artistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Artist exists")
	}

	return count > 0, nil
}

// ArtistIdAlbums retrieves all the Album's Albums with an executor via ArtistId column.
func (o *Artist) ArtistIdAlbums(mods ...qm.QueryMod) albumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Album\".\"ArtistId\"=?", o.ArtistId),
	)

	query := Albums(queryMods...)
	queries.SetFrom(query.Query, "\"Album\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Album\".*"})
	}

	return query
}

// LoadArtistIdAlbums allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (artistL) LoadArtistIdAlbums(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArtist interface{}, mods queries.Applicator) error {
	var slice []*Artist
	var object *Artist

	if singular {
		object = maybeArtist.(*Artist)
	} else {
		slice = *maybeArtist.(*[]*Artist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &artistR{}
		}
		args = append(args, object.ArtistId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &artistR{}
			}

			for _, a := range args {
				if a == obj.ArtistId {
					continue Outer
				}
			}

			args = append(args, obj.ArtistId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Album`),
		qm.WhereIn(`Album.ArtistId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Album")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Album")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArtistIdAlbums = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &albumR{}
			}
			foreign.R.ArtistIdArtist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ArtistId == foreign.ArtistId {
				local.R.ArtistIdAlbums = append(local.R.ArtistIdAlbums, foreign)
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.ArtistIdArtist = local
				break
			}
		}
	}

	return nil
}

// AddArtistIdAlbums adds the given related objects to the existing relationships
// of the Artist, optionally inserting them as new records.
// Appends related to o.R.ArtistIdAlbums.
// Sets related.R.ArtistIdArtist appropriately.
func (o *Artist) AddArtistIdAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArtistId = o.ArtistId
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Album\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"ArtistId"}),
				strmangle.WhereClause("\"", "\"", 0, albumPrimaryKeyColumns),
			)
			values := []interface{}{o.ArtistId, rel.AlbumId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArtistId = o.ArtistId
		}
	}

	if o.R == nil {
		o.R = &artistR{
			ArtistIdAlbums: related,
		}
	} else {
		o.R.ArtistIdAlbums = append(o.R.ArtistIdAlbums, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &albumR{
				ArtistIdArtist: o,
			}
		} else {
			rel.R.ArtistIdArtist = o
		}
	}
	return nil
}

// Artists retrieves all the records using an executor.
func Artists(mods ...qm.QueryMod) artistQuery {
	mods = append(mods, qm.From("\"Artist\""))
	return artistQuery{NewQuery(mods...)}
}

// FindArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArtist(ctx context.Context, exec boil.ContextExecutor, artistId int64, selectCols ...string) (*Artist, error) {
	artistObj := &Artist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Artist\" where \"ArtistId\"=?", sel,
	)

	q := queries.Raw(query, artistId)

	err := q.Bind(ctx, exec, artistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Artist")
	}

	if err = artistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return artistObj, err
	}

	return artistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Artist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Artist provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	artistInsertCacheMut.RLock()
	cache, cached := artistInsertCache[key]
	artistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(artistType, artistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Artist\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Artist\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Artist")
	}

	if !cached {
		artistInsertCacheMut.Lock()
		artistInsertCache[key] = cache
		artistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Artist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Artist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	artistUpdateCacheMut.RLock()
	cache, cached := artistUpdateCache[key]
	artistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Artist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Artist\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, artistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, append(wl, artistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Artist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Artist")
	}

	if !cached {
		artistUpdateCacheMut.Lock()
		artistUpdateCache[key] = cache
		artistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q artistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Artist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Artist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all artist")
	}
	return rowsAff, nil
}

// Delete deletes a single Artist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Artist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Artist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), artistPrimaryKeyMapping)
	sql := "DELETE FROM \"Artist\" WHERE \"ArtistId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Artist")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q artistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no artistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Artist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Artist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(artistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Artist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from artist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Artist")
	}

	if len(artistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Artist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArtist(ctx, exec, o.ArtistId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), artistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Artist\".* FROM \"Artist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, artistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArtistSlice")
	}

	*o = slice

	return nil
}

// ArtistExists checks if the Artist row exists.
func ArtistExists(ctx context.Context, exec boil.ContextExecutor, artistId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Artist\" where \"ArtistId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, artistId)
	}
	row := exec.QueryRowContext(ctx, sql, artistId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Artist exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Artist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Artist provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(artistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	artistUpsertCacheMut.RLock()
	cache, cached := artistUpsertCache[key]
	artistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			artistAllColumns,
			artistColumnsWithDefault,
			artistColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Artist, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(artistPrimaryKeyColumns))
			copy(conflict, artistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Artist\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(artistType, artistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(artistType, artistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Artist")
	}

	if !cached {
		artistUpsertCacheMut.Lock()
		artistUpsertCache[key] = cache
		artistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
