// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Album is an object representing the database table.
type Album struct {
	AlbumId  int64      `boil:"AlbumId" json:"AlbumId" toml:"AlbumId" yaml:"AlbumId"`
	Title    string     `boil:"Title" json:"Title" toml:"Title" yaml:"Title"`
	ArtistId int64      `boil:"ArtistId" json:"ArtistId" toml:"ArtistId" yaml:"ArtistId"`
	Column1  null.Bytes `boil:"Column1" json:"Column1,omitempty" toml:"Column1" yaml:"Column1,omitempty"`

	R *albumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L albumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlbumColumns = struct {
	AlbumId  string
	Title    string
	ArtistId string
	Column1  string
}{
	AlbumId:  "AlbumId",
	Title:    "Title",
	ArtistId: "ArtistId",
	Column1:  "Column1",
}

var AlbumTableColumns = struct {
	AlbumId  string
	Title    string
	ArtistId string
	Column1  string
}{
	AlbumId:  "Album.AlbumId",
	Title:    "Album.Title",
	ArtistId: "Album.ArtistId",
	Column1:  "Album.Column1",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AlbumWhere = struct {
	AlbumId  whereHelperint64
	Title    whereHelperstring
	ArtistId whereHelperint64
	Column1  whereHelpernull_Bytes
}{
	AlbumId:  whereHelperint64{field: "\"Album\".\"AlbumId\""},
	Title:    whereHelperstring{field: "\"Album\".\"Title\""},
	ArtistId: whereHelperint64{field: "\"Album\".\"ArtistId\""},
	Column1:  whereHelpernull_Bytes{field: "\"Album\".\"Column1\""},
}

// AlbumRels is where relationship names are stored.
var AlbumRels = struct {
	ArtistIdArtist string
	AlbumIdTracks  string
}{
	ArtistIdArtist: "ArtistIdArtist",
	AlbumIdTracks:  "AlbumIdTracks",
}

// albumR is where relationships are stored.
type albumR struct {
	ArtistIdArtist *Artist    `boil:"ArtistIdArtist" json:"ArtistIdArtist" toml:"ArtistIdArtist" yaml:"ArtistIdArtist"`
	AlbumIdTracks  TrackSlice `boil:"AlbumIdTracks" json:"AlbumIdTracks" toml:"AlbumIdTracks" yaml:"AlbumIdTracks"`
}

// NewStruct creates a new relationship struct
func (*albumR) NewStruct() *albumR {
	return &albumR{}
}

// albumL is where Load methods for each relationship are stored.
type albumL struct{}

var (
	albumAllColumns            = []string{"AlbumId", "Title", "ArtistId", "Column1"}
	albumColumnsWithoutDefault = []string{"Title", "ArtistId", "Column1"}
	albumColumnsWithDefault    = []string{"AlbumId"}
	albumPrimaryKeyColumns     = []string{"AlbumId"}
)

type (
	// AlbumSlice is an alias for a slice of pointers to Album.
	// This should almost always be used instead of []Album.
	AlbumSlice []*Album
	// AlbumHook is the signature for custom Album hook methods
	AlbumHook func(context.Context, boil.ContextExecutor, *Album) error

	albumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	albumType                 = reflect.TypeOf(&Album{})
	albumMapping              = queries.MakeStructMapping(albumType)
	albumPrimaryKeyMapping, _ = queries.BindMapping(albumType, albumMapping, albumPrimaryKeyColumns)
	albumInsertCacheMut       sync.RWMutex
	albumInsertCache          = make(map[string]insertCache)
	albumUpdateCacheMut       sync.RWMutex
	albumUpdateCache          = make(map[string]updateCache)
	albumUpsertCacheMut       sync.RWMutex
	albumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var albumBeforeInsertHooks []AlbumHook
var albumBeforeUpdateHooks []AlbumHook
var albumBeforeDeleteHooks []AlbumHook
var albumBeforeUpsertHooks []AlbumHook

var albumAfterInsertHooks []AlbumHook
var albumAfterSelectHooks []AlbumHook
var albumAfterUpdateHooks []AlbumHook
var albumAfterDeleteHooks []AlbumHook
var albumAfterUpsertHooks []AlbumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Album) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Album) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Album) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Album) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Album) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Album) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Album) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Album) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Album) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlbumHook registers your hook function for all future operations.
func AddAlbumHook(hookPoint boil.HookPoint, albumHook AlbumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		albumBeforeInsertHooks = append(albumBeforeInsertHooks, albumHook)
	case boil.BeforeUpdateHook:
		albumBeforeUpdateHooks = append(albumBeforeUpdateHooks, albumHook)
	case boil.BeforeDeleteHook:
		albumBeforeDeleteHooks = append(albumBeforeDeleteHooks, albumHook)
	case boil.BeforeUpsertHook:
		albumBeforeUpsertHooks = append(albumBeforeUpsertHooks, albumHook)
	case boil.AfterInsertHook:
		albumAfterInsertHooks = append(albumAfterInsertHooks, albumHook)
	case boil.AfterSelectHook:
		albumAfterSelectHooks = append(albumAfterSelectHooks, albumHook)
	case boil.AfterUpdateHook:
		albumAfterUpdateHooks = append(albumAfterUpdateHooks, albumHook)
	case boil.AfterDeleteHook:
		albumAfterDeleteHooks = append(albumAfterDeleteHooks, albumHook)
	case boil.AfterUpsertHook:
		albumAfterUpsertHooks = append(albumAfterUpsertHooks, albumHook)
	}
}

// One returns a single album record from the query.
func (q albumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Album, error) {
	o := &Album{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Album")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Album records from the query.
func (q albumQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlbumSlice, error) {
	var o []*Album

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Album slice")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Album records in the query.
func (q albumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Album rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q albumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Album exists")
	}

	return count > 0, nil
}

// ArtistIdArtist pointed to by the foreign key.
func (o *Album) ArtistIdArtist(mods ...qm.QueryMod) artistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"ArtistId\" = ?", o.ArtistId),
	}

	queryMods = append(queryMods, mods...)

	query := Artists(queryMods...)
	queries.SetFrom(query.Query, "\"Artist\"")

	return query
}

// AlbumIdTracks retrieves all the Track's Tracks with an executor via AlbumId column.
func (o *Album) AlbumIdTracks(mods ...qm.QueryMod) trackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Track\".\"AlbumId\"=?", o.AlbumId),
	)

	query := Tracks(queryMods...)
	queries.SetFrom(query.Query, "\"Track\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Track\".*"})
	}

	return query
}

// LoadArtistIdArtist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (albumL) LoadArtistIdArtist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlbum interface{}, mods queries.Applicator) error {
	var slice []*Album
	var object *Album

	if singular {
		object = maybeAlbum.(*Album)
	} else {
		slice = *maybeAlbum.(*[]*Album)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumR{}
		}
		args = append(args, object.ArtistId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumR{}
			}

			for _, a := range args {
				if a == obj.ArtistId {
					continue Outer
				}
			}

			args = append(args, obj.ArtistId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Artist`),
		qm.WhereIn(`Artist.ArtistId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artist")
	}

	var resultSlice []*Artist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Artist")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Artist")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ArtistIdArtist = foreign
		if foreign.R == nil {
			foreign.R = &artistR{}
		}
		foreign.R.ArtistIdAlbums = append(foreign.R.ArtistIdAlbums, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArtistId == foreign.ArtistId {
				local.R.ArtistIdArtist = foreign
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.ArtistIdAlbums = append(foreign.R.ArtistIdAlbums, local)
				break
			}
		}
	}

	return nil
}

// LoadAlbumIdTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (albumL) LoadAlbumIdTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlbum interface{}, mods queries.Applicator) error {
	var slice []*Album
	var object *Album

	if singular {
		object = maybeAlbum.(*Album)
	} else {
		slice = *maybeAlbum.(*[]*Album)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumR{}
		}
		args = append(args, object.AlbumId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AlbumId) {
					continue Outer
				}
			}

			args = append(args, obj.AlbumId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Track`),
		qm.WhereIn(`Track.AlbumId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Track")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Track")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AlbumIdTracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackR{}
			}
			foreign.R.AlbumIdAlbum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AlbumId, foreign.AlbumId) {
				local.R.AlbumIdTracks = append(local.R.AlbumIdTracks, foreign)
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.AlbumIdAlbum = local
				break
			}
		}
	}

	return nil
}

// SetArtistIdArtist of the album to the related item.
// Sets o.R.ArtistIdArtist to related.
// Adds o to related.R.ArtistIdAlbums.
func (o *Album) SetArtistIdArtist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Artist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Album\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"ArtistId"}),
		strmangle.WhereClause("\"", "\"", 0, albumPrimaryKeyColumns),
	)
	values := []interface{}{related.ArtistId, o.AlbumId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArtistId = related.ArtistId
	if o.R == nil {
		o.R = &albumR{
			ArtistIdArtist: related,
		}
	} else {
		o.R.ArtistIdArtist = related
	}

	if related.R == nil {
		related.R = &artistR{
			ArtistIdAlbums: AlbumSlice{o},
		}
	} else {
		related.R.ArtistIdAlbums = append(related.R.ArtistIdAlbums, o)
	}

	return nil
}

// AddAlbumIdTracks adds the given related objects to the existing relationships
// of the Album, optionally inserting them as new records.
// Appends related to o.R.AlbumIdTracks.
// Sets related.R.AlbumIdAlbum appropriately.
func (o *Album) AddAlbumIdTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AlbumId, o.AlbumId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Track\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"AlbumId"}),
				strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
			)
			values := []interface{}{o.AlbumId, rel.TrackId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AlbumId, o.AlbumId)
		}
	}

	if o.R == nil {
		o.R = &albumR{
			AlbumIdTracks: related,
		}
	} else {
		o.R.AlbumIdTracks = append(o.R.AlbumIdTracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackR{
				AlbumIdAlbum: o,
			}
		} else {
			rel.R.AlbumIdAlbum = o
		}
	}
	return nil
}

// SetAlbumIdTracks removes all previously related items of the
// Album replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AlbumIdAlbum's AlbumIdTracks accordingly.
// Replaces o.R.AlbumIdTracks with related.
// Sets related.R.AlbumIdAlbum's AlbumIdTracks accordingly.
func (o *Album) SetAlbumIdTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	query := "update \"Track\" set \"AlbumId\" = null where \"AlbumId\" = ?"
	values := []interface{}{o.AlbumId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AlbumIdTracks {
			queries.SetScanner(&rel.AlbumId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AlbumIdAlbum = nil
		}

		o.R.AlbumIdTracks = nil
	}
	return o.AddAlbumIdTracks(ctx, exec, insert, related...)
}

// RemoveAlbumIdTracks relationships from objects passed in.
// Removes related items from R.AlbumIdTracks (uses pointer comparison, removal does not keep order)
// Sets related.R.AlbumIdAlbum.
func (o *Album) RemoveAlbumIdTracks(ctx context.Context, exec boil.ContextExecutor, related ...*Track) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AlbumId, nil)
		if rel.R != nil {
			rel.R.AlbumIdAlbum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("AlbumId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AlbumIdTracks {
			if rel != ri {
				continue
			}

			ln := len(o.R.AlbumIdTracks)
			if ln > 1 && i < ln-1 {
				o.R.AlbumIdTracks[i] = o.R.AlbumIdTracks[ln-1]
			}
			o.R.AlbumIdTracks = o.R.AlbumIdTracks[:ln-1]
			break
		}
	}

	return nil
}

// Albums retrieves all the records using an executor.
func Albums(mods ...qm.QueryMod) albumQuery {
	mods = append(mods, qm.From("\"Album\""))
	return albumQuery{NewQuery(mods...)}
}

// FindAlbum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlbum(ctx context.Context, exec boil.ContextExecutor, albumId int64, selectCols ...string) (*Album, error) {
	albumObj := &Album{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Album\" where \"AlbumId\"=?", sel,
	)

	q := queries.Raw(query, albumId)

	err := q.Bind(ctx, exec, albumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Album")
	}

	if err = albumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return albumObj, err
	}

	return albumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Album) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Album provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	albumInsertCacheMut.RLock()
	cache, cached := albumInsertCache[key]
	albumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			albumAllColumns,
			albumColumnsWithDefault,
			albumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(albumType, albumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Album\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Album\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Album")
	}

	if !cached {
		albumInsertCacheMut.Lock()
		albumInsertCache[key] = cache
		albumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Album.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Album) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	albumUpdateCacheMut.RLock()
	cache, cached := albumUpdateCache[key]
	albumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			albumAllColumns,
			albumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Album, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Album\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, albumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, append(wl, albumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Album row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Album")
	}

	if !cached {
		albumUpdateCacheMut.Lock()
		albumUpdateCache[key] = cache
		albumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q albumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Album")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Album")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlbumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Album\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in album slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all album")
	}
	return rowsAff, nil
}

// Delete deletes a single Album record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Album) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Album provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), albumPrimaryKeyMapping)
	sql := "DELETE FROM \"Album\" WHERE \"AlbumId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Album")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Album")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q albumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no albumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Album")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Album")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlbumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(albumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Album\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from album slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Album")
	}

	if len(albumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Album) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlbum(ctx, exec, o.AlbumId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlbumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlbumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Album\".* FROM \"Album\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AlbumSlice")
	}

	*o = slice

	return nil
}

// AlbumExists checks if the Album row exists.
func AlbumExists(ctx context.Context, exec boil.ContextExecutor, albumId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Album\" where \"AlbumId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, albumId)
	}
	row := exec.QueryRowContext(ctx, sql, albumId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Album exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Album) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Album provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	albumUpsertCacheMut.RLock()
	cache, cached := albumUpsertCache[key]
	albumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			albumAllColumns,
			albumColumnsWithDefault,
			albumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			albumAllColumns,
			albumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Album, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(albumPrimaryKeyColumns))
			copy(conflict, albumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Album\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(albumType, albumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Album")
	}

	if !cached {
		albumUpsertCacheMut.Lock()
		albumUpsertCache[key] = cache
		albumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
