// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	EmployeeId int64       `boil:"EmployeeId" json:"EmployeeId" toml:"EmployeeId" yaml:"EmployeeId"`
	LastName   string      `boil:"LastName" json:"LastName" toml:"LastName" yaml:"LastName"`
	FirstName  string      `boil:"FirstName" json:"FirstName" toml:"FirstName" yaml:"FirstName"`
	Title      null.String `boil:"Title" json:"Title,omitempty" toml:"Title" yaml:"Title,omitempty"`
	ReportsTo  null.Int64  `boil:"ReportsTo" json:"ReportsTo,omitempty" toml:"ReportsTo" yaml:"ReportsTo,omitempty"`
	BirthDate  null.Time   `boil:"BirthDate" json:"BirthDate,omitempty" toml:"BirthDate" yaml:"BirthDate,omitempty"`
	HireDate   null.Time   `boil:"HireDate" json:"HireDate,omitempty" toml:"HireDate" yaml:"HireDate,omitempty"`
	Address    null.String `boil:"Address" json:"Address,omitempty" toml:"Address" yaml:"Address,omitempty"`
	City       null.String `boil:"City" json:"City,omitempty" toml:"City" yaml:"City,omitempty"`
	State      null.String `boil:"State" json:"State,omitempty" toml:"State" yaml:"State,omitempty"`
	Country    null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	PostalCode null.String `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	Phone      null.String `boil:"Phone" json:"Phone,omitempty" toml:"Phone" yaml:"Phone,omitempty"`
	Fax        null.String `boil:"Fax" json:"Fax,omitempty" toml:"Fax" yaml:"Fax,omitempty"`
	Email      null.String `boil:"Email" json:"Email,omitempty" toml:"Email" yaml:"Email,omitempty"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	EmployeeId string
	LastName   string
	FirstName  string
	Title      string
	ReportsTo  string
	BirthDate  string
	HireDate   string
	Address    string
	City       string
	State      string
	Country    string
	PostalCode string
	Phone      string
	Fax        string
	Email      string
}{
	EmployeeId: "EmployeeId",
	LastName:   "LastName",
	FirstName:  "FirstName",
	Title:      "Title",
	ReportsTo:  "ReportsTo",
	BirthDate:  "BirthDate",
	HireDate:   "HireDate",
	Address:    "Address",
	City:       "City",
	State:      "State",
	Country:    "Country",
	PostalCode: "PostalCode",
	Phone:      "Phone",
	Fax:        "Fax",
	Email:      "Email",
}

var EmployeeTableColumns = struct {
	EmployeeId string
	LastName   string
	FirstName  string
	Title      string
	ReportsTo  string
	BirthDate  string
	HireDate   string
	Address    string
	City       string
	State      string
	Country    string
	PostalCode string
	Phone      string
	Fax        string
	Email      string
}{
	EmployeeId: "Employee.EmployeeId",
	LastName:   "Employee.LastName",
	FirstName:  "Employee.FirstName",
	Title:      "Employee.Title",
	ReportsTo:  "Employee.ReportsTo",
	BirthDate:  "Employee.BirthDate",
	HireDate:   "Employee.HireDate",
	Address:    "Employee.Address",
	City:       "Employee.City",
	State:      "Employee.State",
	Country:    "Employee.Country",
	PostalCode: "Employee.PostalCode",
	Phone:      "Employee.Phone",
	Fax:        "Employee.Fax",
	Email:      "Employee.Email",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EmployeeWhere = struct {
	EmployeeId whereHelperint64
	LastName   whereHelperstring
	FirstName  whereHelperstring
	Title      whereHelpernull_String
	ReportsTo  whereHelpernull_Int64
	BirthDate  whereHelpernull_Time
	HireDate   whereHelpernull_Time
	Address    whereHelpernull_String
	City       whereHelpernull_String
	State      whereHelpernull_String
	Country    whereHelpernull_String
	PostalCode whereHelpernull_String
	Phone      whereHelpernull_String
	Fax        whereHelpernull_String
	Email      whereHelpernull_String
}{
	EmployeeId: whereHelperint64{field: "\"Employee\".\"EmployeeId\""},
	LastName:   whereHelperstring{field: "\"Employee\".\"LastName\""},
	FirstName:  whereHelperstring{field: "\"Employee\".\"FirstName\""},
	Title:      whereHelpernull_String{field: "\"Employee\".\"Title\""},
	ReportsTo:  whereHelpernull_Int64{field: "\"Employee\".\"ReportsTo\""},
	BirthDate:  whereHelpernull_Time{field: "\"Employee\".\"BirthDate\""},
	HireDate:   whereHelpernull_Time{field: "\"Employee\".\"HireDate\""},
	Address:    whereHelpernull_String{field: "\"Employee\".\"Address\""},
	City:       whereHelpernull_String{field: "\"Employee\".\"City\""},
	State:      whereHelpernull_String{field: "\"Employee\".\"State\""},
	Country:    whereHelpernull_String{field: "\"Employee\".\"Country\""},
	PostalCode: whereHelpernull_String{field: "\"Employee\".\"PostalCode\""},
	Phone:      whereHelpernull_String{field: "\"Employee\".\"Phone\""},
	Fax:        whereHelpernull_String{field: "\"Employee\".\"Fax\""},
	Email:      whereHelpernull_String{field: "\"Employee\".\"Email\""},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	ReportsToEmployee     string
	SupportRepIdCustomers string
	ReportsToEmployees    string
}{
	ReportsToEmployee:     "ReportsToEmployee",
	SupportRepIdCustomers: "SupportRepIdCustomers",
	ReportsToEmployees:    "ReportsToEmployees",
}

// employeeR is where relationships are stored.
type employeeR struct {
	ReportsToEmployee     *Employee     `boil:"ReportsToEmployee" json:"ReportsToEmployee" toml:"ReportsToEmployee" yaml:"ReportsToEmployee"`
	SupportRepIdCustomers CustomerSlice `boil:"SupportRepIdCustomers" json:"SupportRepIdCustomers" toml:"SupportRepIdCustomers" yaml:"SupportRepIdCustomers"`
	ReportsToEmployees    EmployeeSlice `boil:"ReportsToEmployees" json:"ReportsToEmployees" toml:"ReportsToEmployees" yaml:"ReportsToEmployees"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"EmployeeId", "LastName", "FirstName", "Title", "ReportsTo", "BirthDate", "HireDate", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email"}
	employeeColumnsWithoutDefault = []string{"LastName", "FirstName", "Title", "ReportsTo", "BirthDate", "HireDate", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email"}
	employeeColumnsWithDefault    = []string{"EmployeeId"}
	employeePrimaryKeyColumns     = []string{"EmployeeId"}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeBeforeInsertHooks []EmployeeHook
var employeeBeforeUpdateHooks []EmployeeHook
var employeeBeforeDeleteHooks []EmployeeHook
var employeeBeforeUpsertHooks []EmployeeHook

var employeeAfterInsertHooks []EmployeeHook
var employeeAfterSelectHooks []EmployeeHook
var employeeAfterUpdateHooks []EmployeeHook
var employeeAfterDeleteHooks []EmployeeHook
var employeeAfterUpsertHooks []EmployeeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
	case boil.AfterInsertHook:
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
	case boil.AfterSelectHook:
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
	case boil.AfterUpdateHook:
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
	case boil.AfterDeleteHook:
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
	case boil.AfterUpsertHook:
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
	}
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Employee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Employee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Employee exists")
	}

	return count > 0, nil
}

// ReportsToEmployee pointed to by the foreign key.
func (o *Employee) ReportsToEmployee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"EmployeeId\" = ?", o.ReportsTo),
	}

	queryMods = append(queryMods, mods...)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "\"Employee\"")

	return query
}

// SupportRepIdCustomers retrieves all the Customer's Customers with an executor via SupportRepId column.
func (o *Employee) SupportRepIdCustomers(mods ...qm.QueryMod) customerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Customer\".\"SupportRepId\"=?", o.EmployeeId),
	)

	query := Customers(queryMods...)
	queries.SetFrom(query.Query, "\"Customer\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Customer\".*"})
	}

	return query
}

// ReportsToEmployees retrieves all the Employee's Employees with an executor via ReportsTo column.
func (o *Employee) ReportsToEmployees(mods ...qm.QueryMod) employeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Employee\".\"ReportsTo\"=?", o.EmployeeId),
	)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "\"Employee\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Employee\".*"})
	}

	return query
}

// LoadReportsToEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (employeeL) LoadReportsToEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		if !queries.IsNil(object.ReportsTo) {
			args = append(args, object.ReportsTo)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReportsTo) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReportsTo) {
				args = append(args, obj.ReportsTo)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Employee`),
		qm.WhereIn(`Employee.EmployeeId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Employee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Employee")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReportsToEmployee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.ReportsToEmployees = append(foreign.R.ReportsToEmployees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReportsTo, foreign.EmployeeId) {
				local.R.ReportsToEmployee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.ReportsToEmployees = append(foreign.R.ReportsToEmployees, local)
				break
			}
		}
	}

	return nil
}

// LoadSupportRepIdCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadSupportRepIdCustomers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmployeeId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmployeeId) {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Customer`),
		qm.WhereIn(`Customer.SupportRepId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Customer")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupportRepIdCustomers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerR{}
			}
			foreign.R.SupportRepIdEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.EmployeeId, foreign.SupportRepId) {
				local.R.SupportRepIdCustomers = append(local.R.SupportRepIdCustomers, foreign)
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.SupportRepIdEmployee = local
				break
			}
		}
	}

	return nil
}

// LoadReportsToEmployees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadReportsToEmployees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmployeeId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmployeeId) {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Employee`),
		qm.WhereIn(`Employee.ReportsTo in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Employee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Employee")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReportsToEmployees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &employeeR{}
			}
			foreign.R.ReportsToEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.EmployeeId, foreign.ReportsTo) {
				local.R.ReportsToEmployees = append(local.R.ReportsToEmployees, foreign)
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.ReportsToEmployee = local
				break
			}
		}
	}

	return nil
}

// SetReportsToEmployee of the employee to the related item.
// Sets o.R.ReportsToEmployee to related.
// Adds o to related.R.ReportsToEmployees.
func (o *Employee) SetReportsToEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Employee\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"ReportsTo"}),
		strmangle.WhereClause("\"", "\"", 0, employeePrimaryKeyColumns),
	)
	values := []interface{}{related.EmployeeId, o.EmployeeId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReportsTo, related.EmployeeId)
	if o.R == nil {
		o.R = &employeeR{
			ReportsToEmployee: related,
		}
	} else {
		o.R.ReportsToEmployee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			ReportsToEmployees: EmployeeSlice{o},
		}
	} else {
		related.R.ReportsToEmployees = append(related.R.ReportsToEmployees, o)
	}

	return nil
}

// RemoveReportsToEmployee relationship.
// Sets o.R.ReportsToEmployee to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Employee) RemoveReportsToEmployee(ctx context.Context, exec boil.ContextExecutor, related *Employee) error {
	var err error

	queries.SetScanner(&o.ReportsTo, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ReportsTo")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReportsToEmployee = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReportsToEmployees {
		if queries.Equal(o.ReportsTo, ri.ReportsTo) {
			continue
		}

		ln := len(related.R.ReportsToEmployees)
		if ln > 1 && i < ln-1 {
			related.R.ReportsToEmployees[i] = related.R.ReportsToEmployees[ln-1]
		}
		related.R.ReportsToEmployees = related.R.ReportsToEmployees[:ln-1]
		break
	}
	return nil
}

// AddSupportRepIdCustomers adds the given related objects to the existing relationships
// of the Employee, optionally inserting them as new records.
// Appends related to o.R.SupportRepIdCustomers.
// Sets related.R.SupportRepIdEmployee appropriately.
func (o *Employee) AddSupportRepIdCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SupportRepId, o.EmployeeId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Customer\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"SupportRepId"}),
				strmangle.WhereClause("\"", "\"", 0, customerPrimaryKeyColumns),
			)
			values := []interface{}{o.EmployeeId, rel.CustomerId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SupportRepId, o.EmployeeId)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			SupportRepIdCustomers: related,
		}
	} else {
		o.R.SupportRepIdCustomers = append(o.R.SupportRepIdCustomers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerR{
				SupportRepIdEmployee: o,
			}
		} else {
			rel.R.SupportRepIdEmployee = o
		}
	}
	return nil
}

// SetSupportRepIdCustomers removes all previously related items of the
// Employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SupportRepIdEmployee's SupportRepIdCustomers accordingly.
// Replaces o.R.SupportRepIdCustomers with related.
// Sets related.R.SupportRepIdEmployee's SupportRepIdCustomers accordingly.
func (o *Employee) SetSupportRepIdCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	query := "update \"Customer\" set \"SupportRepId\" = null where \"SupportRepId\" = ?"
	values := []interface{}{o.EmployeeId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SupportRepIdCustomers {
			queries.SetScanner(&rel.SupportRepId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SupportRepIdEmployee = nil
		}

		o.R.SupportRepIdCustomers = nil
	}
	return o.AddSupportRepIdCustomers(ctx, exec, insert, related...)
}

// RemoveSupportRepIdCustomers relationships from objects passed in.
// Removes related items from R.SupportRepIdCustomers (uses pointer comparison, removal does not keep order)
// Sets related.R.SupportRepIdEmployee.
func (o *Employee) RemoveSupportRepIdCustomers(ctx context.Context, exec boil.ContextExecutor, related ...*Customer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SupportRepId, nil)
		if rel.R != nil {
			rel.R.SupportRepIdEmployee = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("SupportRepId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SupportRepIdCustomers {
			if rel != ri {
				continue
			}

			ln := len(o.R.SupportRepIdCustomers)
			if ln > 1 && i < ln-1 {
				o.R.SupportRepIdCustomers[i] = o.R.SupportRepIdCustomers[ln-1]
			}
			o.R.SupportRepIdCustomers = o.R.SupportRepIdCustomers[:ln-1]
			break
		}
	}

	return nil
}

// AddReportsToEmployees adds the given related objects to the existing relationships
// of the Employee, optionally inserting them as new records.
// Appends related to o.R.ReportsToEmployees.
// Sets related.R.ReportsToEmployee appropriately.
func (o *Employee) AddReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReportsTo, o.EmployeeId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Employee\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"ReportsTo"}),
				strmangle.WhereClause("\"", "\"", 0, employeePrimaryKeyColumns),
			)
			values := []interface{}{o.EmployeeId, rel.EmployeeId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReportsTo, o.EmployeeId)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			ReportsToEmployees: related,
		}
	} else {
		o.R.ReportsToEmployees = append(o.R.ReportsToEmployees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &employeeR{
				ReportsToEmployee: o,
			}
		} else {
			rel.R.ReportsToEmployee = o
		}
	}
	return nil
}

// SetReportsToEmployees removes all previously related items of the
// Employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReportsToEmployee's ReportsToEmployees accordingly.
// Replaces o.R.ReportsToEmployees with related.
// Sets related.R.ReportsToEmployee's ReportsToEmployees accordingly.
func (o *Employee) SetReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	query := "update \"Employee\" set \"ReportsTo\" = null where \"ReportsTo\" = ?"
	values := []interface{}{o.EmployeeId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReportsToEmployees {
			queries.SetScanner(&rel.ReportsTo, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReportsToEmployee = nil
		}

		o.R.ReportsToEmployees = nil
	}
	return o.AddReportsToEmployees(ctx, exec, insert, related...)
}

// RemoveReportsToEmployees relationships from objects passed in.
// Removes related items from R.ReportsToEmployees (uses pointer comparison, removal does not keep order)
// Sets related.R.ReportsToEmployee.
func (o *Employee) RemoveReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, related ...*Employee) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReportsTo, nil)
		if rel.R != nil {
			rel.R.ReportsToEmployee = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ReportsTo")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReportsToEmployees {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReportsToEmployees)
			if ln > 1 && i < ln-1 {
				o.R.ReportsToEmployees[i] = o.R.ReportsToEmployees[ln-1]
			}
			o.R.ReportsToEmployees = o.R.ReportsToEmployees[:ln-1]
			break
		}
	}

	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("\"Employee\""))
	return employeeQuery{NewQuery(mods...)}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, employeeId int64, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Employee\" where \"EmployeeId\"=?", sel,
	)

	q := queries.Raw(query, employeeId)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Employee")
	}

	if err = employeeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employeeObj, err
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Employee provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Employee\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Employee\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Employee")
	}

	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Employee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Employee\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Employee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Employee")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Employee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Employee\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM \"Employee\" WHERE \"EmployeeId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Employee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Employee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Employee")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.EmployeeId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Employee\".* FROM \"Employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, employeeId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Employee\" where \"EmployeeId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, employeeId)
	}
	row := exec.QueryRowContext(ctx, sql, employeeId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Employee exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Employee provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Employee, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(employeePrimaryKeyColumns))
			copy(conflict, employeePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Employee\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Employee")
	}

	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
