// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaType is an object representing the database table.
type MediaType struct {
	MediaTypeId int64       `boil:"MediaTypeId" json:"MediaTypeId" toml:"MediaTypeId" yaml:"MediaTypeId"`
	Name        null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`

	R *mediaTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaTypeColumns = struct {
	MediaTypeId string
	Name        string
}{
	MediaTypeId: "MediaTypeId",
	Name:        "Name",
}

var MediaTypeTableColumns = struct {
	MediaTypeId string
	Name        string
}{
	MediaTypeId: "MediaType.MediaTypeId",
	Name:        "MediaType.Name",
}

// Generated where

var MediaTypeWhere = struct {
	MediaTypeId whereHelperint64
	Name        whereHelpernull_String
}{
	MediaTypeId: whereHelperint64{field: "\"MediaType\".\"MediaTypeId\""},
	Name:        whereHelpernull_String{field: "\"MediaType\".\"Name\""},
}

// MediaTypeRels is where relationship names are stored.
var MediaTypeRels = struct {
	MediaTypeIdTracks string
}{
	MediaTypeIdTracks: "MediaTypeIdTracks",
}

// mediaTypeR is where relationships are stored.
type mediaTypeR struct {
	MediaTypeIdTracks TrackSlice `boil:"MediaTypeIdTracks" json:"MediaTypeIdTracks" toml:"MediaTypeIdTracks" yaml:"MediaTypeIdTracks"`
}

// NewStruct creates a new relationship struct
func (*mediaTypeR) NewStruct() *mediaTypeR {
	return &mediaTypeR{}
}

// mediaTypeL is where Load methods for each relationship are stored.
type mediaTypeL struct{}

var (
	mediaTypeAllColumns            = []string{"MediaTypeId", "Name"}
	mediaTypeColumnsWithoutDefault = []string{"Name"}
	mediaTypeColumnsWithDefault    = []string{"MediaTypeId"}
	mediaTypePrimaryKeyColumns     = []string{"MediaTypeId"}
)

type (
	// MediaTypeSlice is an alias for a slice of pointers to MediaType.
	// This should almost always be used instead of []MediaType.
	MediaTypeSlice []*MediaType
	// MediaTypeHook is the signature for custom MediaType hook methods
	MediaTypeHook func(context.Context, boil.ContextExecutor, *MediaType) error

	mediaTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaTypeType                 = reflect.TypeOf(&MediaType{})
	mediaTypeMapping              = queries.MakeStructMapping(mediaTypeType)
	mediaTypePrimaryKeyMapping, _ = queries.BindMapping(mediaTypeType, mediaTypeMapping, mediaTypePrimaryKeyColumns)
	mediaTypeInsertCacheMut       sync.RWMutex
	mediaTypeInsertCache          = make(map[string]insertCache)
	mediaTypeUpdateCacheMut       sync.RWMutex
	mediaTypeUpdateCache          = make(map[string]updateCache)
	mediaTypeUpsertCacheMut       sync.RWMutex
	mediaTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaTypeBeforeInsertHooks []MediaTypeHook
var mediaTypeBeforeUpdateHooks []MediaTypeHook
var mediaTypeBeforeDeleteHooks []MediaTypeHook
var mediaTypeBeforeUpsertHooks []MediaTypeHook

var mediaTypeAfterInsertHooks []MediaTypeHook
var mediaTypeAfterSelectHooks []MediaTypeHook
var mediaTypeAfterUpdateHooks []MediaTypeHook
var mediaTypeAfterDeleteHooks []MediaTypeHook
var mediaTypeAfterUpsertHooks []MediaTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MediaType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MediaType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MediaType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MediaType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MediaType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MediaType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MediaType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MediaType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MediaType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaTypeHook registers your hook function for all future operations.
func AddMediaTypeHook(hookPoint boil.HookPoint, mediaTypeHook MediaTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mediaTypeBeforeInsertHooks = append(mediaTypeBeforeInsertHooks, mediaTypeHook)
	case boil.BeforeUpdateHook:
		mediaTypeBeforeUpdateHooks = append(mediaTypeBeforeUpdateHooks, mediaTypeHook)
	case boil.BeforeDeleteHook:
		mediaTypeBeforeDeleteHooks = append(mediaTypeBeforeDeleteHooks, mediaTypeHook)
	case boil.BeforeUpsertHook:
		mediaTypeBeforeUpsertHooks = append(mediaTypeBeforeUpsertHooks, mediaTypeHook)
	case boil.AfterInsertHook:
		mediaTypeAfterInsertHooks = append(mediaTypeAfterInsertHooks, mediaTypeHook)
	case boil.AfterSelectHook:
		mediaTypeAfterSelectHooks = append(mediaTypeAfterSelectHooks, mediaTypeHook)
	case boil.AfterUpdateHook:
		mediaTypeAfterUpdateHooks = append(mediaTypeAfterUpdateHooks, mediaTypeHook)
	case boil.AfterDeleteHook:
		mediaTypeAfterDeleteHooks = append(mediaTypeAfterDeleteHooks, mediaTypeHook)
	case boil.AfterUpsertHook:
		mediaTypeAfterUpsertHooks = append(mediaTypeAfterUpsertHooks, mediaTypeHook)
	}
}

// One returns a single mediaType record from the query.
func (q mediaTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaType, error) {
	o := &MediaType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for MediaType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MediaType records from the query.
func (q mediaTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaTypeSlice, error) {
	var o []*MediaType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MediaType slice")
	}

	if len(mediaTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MediaType records in the query.
func (q mediaTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count MediaType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mediaTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if MediaType exists")
	}

	return count > 0, nil
}

// MediaTypeIdTracks retrieves all the Track's Tracks with an executor via MediaTypeId column.
func (o *MediaType) MediaTypeIdTracks(mods ...qm.QueryMod) trackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Track\".\"MediaTypeId\"=?", o.MediaTypeId),
	)

	query := Tracks(queryMods...)
	queries.SetFrom(query.Query, "\"Track\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Track\".*"})
	}

	return query
}

// LoadMediaTypeIdTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mediaTypeL) LoadMediaTypeIdTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMediaType interface{}, mods queries.Applicator) error {
	var slice []*MediaType
	var object *MediaType

	if singular {
		object = maybeMediaType.(*MediaType)
	} else {
		slice = *maybeMediaType.(*[]*MediaType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mediaTypeR{}
		}
		args = append(args, object.MediaTypeId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mediaTypeR{}
			}

			for _, a := range args {
				if a == obj.MediaTypeId {
					continue Outer
				}
			}

			args = append(args, obj.MediaTypeId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Track`),
		qm.WhereIn(`Track.MediaTypeId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Track")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Track")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Track")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MediaTypeIdTracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackR{}
			}
			foreign.R.MediaTypeIdMediaType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MediaTypeId == foreign.MediaTypeId {
				local.R.MediaTypeIdTracks = append(local.R.MediaTypeIdTracks, foreign)
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.MediaTypeIdMediaType = local
				break
			}
		}
	}

	return nil
}

// AddMediaTypeIdTracks adds the given related objects to the existing relationships
// of the MediaType, optionally inserting them as new records.
// Appends related to o.R.MediaTypeIdTracks.
// Sets related.R.MediaTypeIdMediaType appropriately.
func (o *MediaType) AddMediaTypeIdTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MediaTypeId = o.MediaTypeId
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Track\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"MediaTypeId"}),
				strmangle.WhereClause("\"", "\"", 0, trackPrimaryKeyColumns),
			)
			values := []interface{}{o.MediaTypeId, rel.TrackId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MediaTypeId = o.MediaTypeId
		}
	}

	if o.R == nil {
		o.R = &mediaTypeR{
			MediaTypeIdTracks: related,
		}
	} else {
		o.R.MediaTypeIdTracks = append(o.R.MediaTypeIdTracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackR{
				MediaTypeIdMediaType: o,
			}
		} else {
			rel.R.MediaTypeIdMediaType = o
		}
	}
	return nil
}

// MediaTypes retrieves all the records using an executor.
func MediaTypes(mods ...qm.QueryMod) mediaTypeQuery {
	mods = append(mods, qm.From("\"MediaType\""))
	return mediaTypeQuery{NewQuery(mods...)}
}

// FindMediaType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaType(ctx context.Context, exec boil.ContextExecutor, mediaTypeId int64, selectCols ...string) (*MediaType, error) {
	mediaTypeObj := &MediaType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"MediaType\" where \"MediaTypeId\"=?", sel,
	)

	q := queries.Raw(query, mediaTypeId)

	err := q.Bind(ctx, exec, mediaTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from MediaType")
	}

	if err = mediaTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaTypeObj, err
	}

	return mediaTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no MediaType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaTypeInsertCacheMut.RLock()
	cache, cached := mediaTypeInsertCache[key]
	mediaTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaTypeAllColumns,
			mediaTypeColumnsWithDefault,
			mediaTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"MediaType\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"MediaType\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into MediaType")
	}

	if !cached {
		mediaTypeInsertCacheMut.Lock()
		mediaTypeInsertCache[key] = cache
		mediaTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MediaType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaTypeUpdateCacheMut.RLock()
	cache, cached := mediaTypeUpdateCache[key]
	mediaTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaTypeAllColumns,
			mediaTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update MediaType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"MediaType\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, mediaTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, append(wl, mediaTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update MediaType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for MediaType")
	}

	if !cached {
		mediaTypeUpdateCacheMut.Lock()
		mediaTypeUpdateCache[key] = cache
		mediaTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for MediaType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for MediaType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"MediaType\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mediaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mediaType")
	}
	return rowsAff, nil
}

// Delete deletes a single MediaType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MediaType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaTypePrimaryKeyMapping)
	sql := "DELETE FROM \"MediaType\" WHERE \"MediaTypeId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from MediaType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for MediaType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mediaTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from MediaType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for MediaType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"MediaType\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mediaType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for MediaType")
	}

	if len(mediaTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaType(ctx, exec, o.MediaTypeId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"MediaType\".* FROM \"MediaType\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaTypeSlice")
	}

	*o = slice

	return nil
}

// MediaTypeExists checks if the MediaType row exists.
func MediaTypeExists(ctx context.Context, exec boil.ContextExecutor, mediaTypeId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"MediaType\" where \"MediaTypeId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mediaTypeId)
	}
	row := exec.QueryRowContext(ctx, sql, mediaTypeId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if MediaType exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no MediaType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaTypeUpsertCacheMut.RLock()
	cache, cached := mediaTypeUpsertCache[key]
	mediaTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mediaTypeAllColumns,
			mediaTypeColumnsWithDefault,
			mediaTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mediaTypeAllColumns,
			mediaTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert MediaType, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mediaTypePrimaryKeyColumns))
			copy(conflict, mediaTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"MediaType\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaTypeType, mediaTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert MediaType")
	}

	if !cached {
		mediaTypeUpsertCacheMut.Lock()
		mediaTypeUpsertCache[key] = cache
		mediaTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
