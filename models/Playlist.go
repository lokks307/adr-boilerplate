// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Playlist is an object representing the database table.
type Playlist struct {
	PlaylistId int64       `boil:"PlaylistId" json:"PlaylistId" toml:"PlaylistId" yaml:"PlaylistId"`
	Name       null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`

	R *playlistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistColumns = struct {
	PlaylistId string
	Name       string
}{
	PlaylistId: "PlaylistId",
	Name:       "Name",
}

var PlaylistTableColumns = struct {
	PlaylistId string
	Name       string
}{
	PlaylistId: "Playlist.PlaylistId",
	Name:       "Playlist.Name",
}

// Generated where

var PlaylistWhere = struct {
	PlaylistId whereHelperint64
	Name       whereHelpernull_String
}{
	PlaylistId: whereHelperint64{field: "\"Playlist\".\"PlaylistId\""},
	Name:       whereHelpernull_String{field: "\"Playlist\".\"Name\""},
}

// PlaylistRels is where relationship names are stored.
var PlaylistRels = struct {
	TrackIdTracks string
}{
	TrackIdTracks: "TrackIdTracks",
}

// playlistR is where relationships are stored.
type playlistR struct {
	TrackIdTracks TrackSlice `boil:"TrackIdTracks" json:"TrackIdTracks" toml:"TrackIdTracks" yaml:"TrackIdTracks"`
}

// NewStruct creates a new relationship struct
func (*playlistR) NewStruct() *playlistR {
	return &playlistR{}
}

// playlistL is where Load methods for each relationship are stored.
type playlistL struct{}

var (
	playlistAllColumns            = []string{"PlaylistId", "Name"}
	playlistColumnsWithoutDefault = []string{"Name"}
	playlistColumnsWithDefault    = []string{"PlaylistId"}
	playlistPrimaryKeyColumns     = []string{"PlaylistId"}
)

type (
	// PlaylistSlice is an alias for a slice of pointers to Playlist.
	// This should almost always be used instead of []Playlist.
	PlaylistSlice []*Playlist
	// PlaylistHook is the signature for custom Playlist hook methods
	PlaylistHook func(context.Context, boil.ContextExecutor, *Playlist) error

	playlistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistType                 = reflect.TypeOf(&Playlist{})
	playlistMapping              = queries.MakeStructMapping(playlistType)
	playlistPrimaryKeyMapping, _ = queries.BindMapping(playlistType, playlistMapping, playlistPrimaryKeyColumns)
	playlistInsertCacheMut       sync.RWMutex
	playlistInsertCache          = make(map[string]insertCache)
	playlistUpdateCacheMut       sync.RWMutex
	playlistUpdateCache          = make(map[string]updateCache)
	playlistUpsertCacheMut       sync.RWMutex
	playlistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playlistBeforeInsertHooks []PlaylistHook
var playlistBeforeUpdateHooks []PlaylistHook
var playlistBeforeDeleteHooks []PlaylistHook
var playlistBeforeUpsertHooks []PlaylistHook

var playlistAfterInsertHooks []PlaylistHook
var playlistAfterSelectHooks []PlaylistHook
var playlistAfterUpdateHooks []PlaylistHook
var playlistAfterDeleteHooks []PlaylistHook
var playlistAfterUpsertHooks []PlaylistHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Playlist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Playlist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Playlist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Playlist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Playlist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Playlist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Playlist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Playlist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Playlist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlaylistHook registers your hook function for all future operations.
func AddPlaylistHook(hookPoint boil.HookPoint, playlistHook PlaylistHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playlistBeforeInsertHooks = append(playlistBeforeInsertHooks, playlistHook)
	case boil.BeforeUpdateHook:
		playlistBeforeUpdateHooks = append(playlistBeforeUpdateHooks, playlistHook)
	case boil.BeforeDeleteHook:
		playlistBeforeDeleteHooks = append(playlistBeforeDeleteHooks, playlistHook)
	case boil.BeforeUpsertHook:
		playlistBeforeUpsertHooks = append(playlistBeforeUpsertHooks, playlistHook)
	case boil.AfterInsertHook:
		playlistAfterInsertHooks = append(playlistAfterInsertHooks, playlistHook)
	case boil.AfterSelectHook:
		playlistAfterSelectHooks = append(playlistAfterSelectHooks, playlistHook)
	case boil.AfterUpdateHook:
		playlistAfterUpdateHooks = append(playlistAfterUpdateHooks, playlistHook)
	case boil.AfterDeleteHook:
		playlistAfterDeleteHooks = append(playlistAfterDeleteHooks, playlistHook)
	case boil.AfterUpsertHook:
		playlistAfterUpsertHooks = append(playlistAfterUpsertHooks, playlistHook)
	}
}

// One returns a single playlist record from the query.
func (q playlistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Playlist, error) {
	o := &Playlist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Playlist")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Playlist records from the query.
func (q playlistQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlaylistSlice, error) {
	var o []*Playlist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Playlist slice")
	}

	if len(playlistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Playlist records in the query.
func (q playlistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Playlist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playlistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Playlist exists")
	}

	return count > 0, nil
}

// TrackIdTracks retrieves all the Track's Tracks with an executor via TrackId column.
func (o *Playlist) TrackIdTracks(mods ...qm.QueryMod) trackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"PlaylistTrack\" on \"Track\".\"TrackId\" = \"PlaylistTrack\".\"TrackId\""),
		qm.Where("\"PlaylistTrack\".\"PlaylistId\"=?", o.PlaylistId),
	)

	query := Tracks(queryMods...)
	queries.SetFrom(query.Query, "\"Track\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Track\".*"})
	}

	return query
}

// LoadTrackIdTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playlistL) LoadTrackIdTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylist interface{}, mods queries.Applicator) error {
	var slice []*Playlist
	var object *Playlist

	if singular {
		object = maybePlaylist.(*Playlist)
	} else {
		slice = *maybePlaylist.(*[]*Playlist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playlistR{}
		}
		args = append(args, object.PlaylistId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistR{}
			}

			for _, a := range args {
				if a == obj.PlaylistId {
					continue Outer
				}
			}

			args = append(args, obj.PlaylistId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"Track\".TrackId, \"Track\".Name, \"Track\".AlbumId, \"Track\".MediaTypeId, \"Track\".GenreId, \"Track\".Composer, \"Track\".Milliseconds, \"Track\".Bytes, \"Track\".UnitPrice, \"a\".\"PlaylistId\""),
		qm.From("\"Track\""),
		qm.InnerJoin("\"PlaylistTrack\" as \"a\" on \"Track\".\"TrackId\" = \"a\".\"TrackId\""),
		qm.WhereIn("\"a\".\"PlaylistId\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Track")
	}

	var resultSlice []*Track

	var localJoinCols []int64
	for results.Next() {
		one := new(Track)
		var localJoinCol int64

		err = results.Scan(&one.TrackId, &one.Name, &one.AlbumId, &one.MediaTypeId, &one.GenreId, &one.Composer, &one.Milliseconds, &one.Bytes, &one.UnitPrice, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for Track")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice Track")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Track")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Track")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TrackIdTracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackR{}
			}
			foreign.R.PlaylistIdPlaylists = append(foreign.R.PlaylistIdPlaylists, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.PlaylistId == localJoinCol {
				local.R.TrackIdTracks = append(local.R.TrackIdTracks, foreign)
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.PlaylistIdPlaylists = append(foreign.R.PlaylistIdPlaylists, local)
				break
			}
		}
	}

	return nil
}

// AddTrackIdTracks adds the given related objects to the existing relationships
// of the Playlist, optionally inserting them as new records.
// Appends related to o.R.TrackIdTracks.
// Sets related.R.PlaylistIdPlaylists appropriately.
func (o *Playlist) AddTrackIdTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"PlaylistTrack\" (\"PlaylistId\", \"TrackId\") values (?, ?)"
		values := []interface{}{o.PlaylistId, rel.TrackId}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &playlistR{
			TrackIdTracks: related,
		}
	} else {
		o.R.TrackIdTracks = append(o.R.TrackIdTracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackR{
				PlaylistIdPlaylists: PlaylistSlice{o},
			}
		} else {
			rel.R.PlaylistIdPlaylists = append(rel.R.PlaylistIdPlaylists, o)
		}
	}
	return nil
}

// SetTrackIdTracks removes all previously related items of the
// Playlist replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PlaylistIdPlaylists's TrackIdTracks accordingly.
// Replaces o.R.TrackIdTracks with related.
// Sets related.R.PlaylistIdPlaylists's TrackIdTracks accordingly.
func (o *Playlist) SetTrackIdTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	query := "delete from \"PlaylistTrack\" where \"PlaylistId\" = ?"
	values := []interface{}{o.PlaylistId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTrackIdTracksFromPlaylistIdPlaylistsSlice(o, related)
	if o.R != nil {
		o.R.TrackIdTracks = nil
	}
	return o.AddTrackIdTracks(ctx, exec, insert, related...)
}

// RemoveTrackIdTracks relationships from objects passed in.
// Removes related items from R.TrackIdTracks (uses pointer comparison, removal does not keep order)
// Sets related.R.PlaylistIdPlaylists.
func (o *Playlist) RemoveTrackIdTracks(ctx context.Context, exec boil.ContextExecutor, related ...*Track) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"PlaylistTrack\" where \"PlaylistId\" = ? and \"TrackId\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.PlaylistId}
	for _, rel := range related {
		values = append(values, rel.TrackId)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTrackIdTracksFromPlaylistIdPlaylistsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TrackIdTracks {
			if rel != ri {
				continue
			}

			ln := len(o.R.TrackIdTracks)
			if ln > 1 && i < ln-1 {
				o.R.TrackIdTracks[i] = o.R.TrackIdTracks[ln-1]
			}
			o.R.TrackIdTracks = o.R.TrackIdTracks[:ln-1]
			break
		}
	}

	return nil
}

func removeTrackIdTracksFromPlaylistIdPlaylistsSlice(o *Playlist, related []*Track) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PlaylistIdPlaylists {
			if o.PlaylistId != ri.PlaylistId {
				continue
			}

			ln := len(rel.R.PlaylistIdPlaylists)
			if ln > 1 && i < ln-1 {
				rel.R.PlaylistIdPlaylists[i] = rel.R.PlaylistIdPlaylists[ln-1]
			}
			rel.R.PlaylistIdPlaylists = rel.R.PlaylistIdPlaylists[:ln-1]
			break
		}
	}
}

// Playlists retrieves all the records using an executor.
func Playlists(mods ...qm.QueryMod) playlistQuery {
	mods = append(mods, qm.From("\"Playlist\""))
	return playlistQuery{NewQuery(mods...)}
}

// FindPlaylist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylist(ctx context.Context, exec boil.ContextExecutor, playlistId int64, selectCols ...string) (*Playlist, error) {
	playlistObj := &Playlist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Playlist\" where \"PlaylistId\"=?", sel,
	)

	q := queries.Raw(query, playlistId)

	err := q.Bind(ctx, exec, playlistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Playlist")
	}

	if err = playlistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playlistObj, err
	}

	return playlistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Playlist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Playlist provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playlistInsertCacheMut.RLock()
	cache, cached := playlistInsertCache[key]
	playlistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Playlist\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Playlist\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Playlist")
	}

	if !cached {
		playlistInsertCacheMut.Lock()
		playlistInsertCache[key] = cache
		playlistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Playlist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Playlist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playlistUpdateCacheMut.RLock()
	cache, cached := playlistUpdateCache[key]
	playlistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Playlist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Playlist\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, playlistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, append(wl, playlistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Playlist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Playlist")
	}

	if !cached {
		playlistUpdateCacheMut.Lock()
		playlistUpdateCache[key] = cache
		playlistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playlistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Playlist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Playlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playlistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playlist")
	}
	return rowsAff, nil
}

// Delete deletes a single Playlist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Playlist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Playlist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistPrimaryKeyMapping)
	sql := "DELETE FROM \"Playlist\" WHERE \"PlaylistId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Playlist")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playlistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playlistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Playlist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playlistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playlistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Playlist")
	}

	if len(playlistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Playlist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlaylist(ctx, exec, o.PlaylistId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaylistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Playlist\".* FROM \"Playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playlistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistSlice")
	}

	*o = slice

	return nil
}

// PlaylistExists checks if the Playlist row exists.
func PlaylistExists(ctx context.Context, exec boil.ContextExecutor, playlistId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Playlist\" where \"PlaylistId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playlistId)
	}
	row := exec.QueryRowContext(ctx, sql, playlistId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Playlist exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Playlist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Playlist provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistUpsertCacheMut.RLock()
	cache, cached := playlistUpsertCache[key]
	playlistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Playlist, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playlistPrimaryKeyColumns))
			copy(conflict, playlistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Playlist\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Playlist")
	}

	if !cached {
		playlistUpsertCacheMut.Lock()
		playlistUpsertCache[key] = cache
		playlistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
